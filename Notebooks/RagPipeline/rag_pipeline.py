import logging
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate
from langchain_openai import OpenAIEmbeddings
from langchain_community.chat_models import ChatOpenAI
from langchain_pinecone import PineconeVectorStore
from pinecone import Pinecone as PineconeClient
from src.core.preprocess import TextProcessor
from src.config.settings import settings


class RAGPipeline:
    """
    Classe que encapsula o retriever + LLM e fornece m√©todo de resposta.
    Permite busca por CPF ou CNPJ usando os metadados 'cpf_contratado' e 'cnpj_contratado'.
    """

    def __init__(self, logger: logging.Logger | None = None):
        self.logger = logger or logging.getLogger(__name__)
        self.pinecone = PineconeClient(
            api_key=settings.PINECONE_API_KEY,
            environment=settings.PINECONE_ENVIRONMENT
        )
        self.embeddings = OpenAIEmbeddings(model=settings.EMBEDDING_MODEL)
        self.vectorstore = PineconeVectorStore(
            index_name=settings.PINECONE_INDEX_NAME,
            embedding=self.embeddings,
            text_key="text"
        )
        self.llm = ChatOpenAI(model_name=settings.LLM_MODEL, temperature=settings.TEMPERATURE)
        self.prompt_template = PromptTemplate(
        template="""
        Voc√™ √© um **Analista de Conformidade (Compliance) Extremo e Jur√≠dico**. Sua miss√£o √© responder a perguntas complexas do usu√°rio de forma **ABSURDAMENTE RIGOROSA, EXATA e com fidelidade ABSOLUTA ao texto do Contrato de Associa√ß√£o (Contexto)**.

        **IDENTIFICA√á√ÉO DE PARTES (VERIFICA√á√ÉO IMPERATIVA):**
        * **EMPRESA ASSOCIADA (AD FOODS IND√öSTRIA...):** CNPJ 10.767.821/0001-01. S√≥cio: Eduardo de Souza Pess√¥a. E-mail Notifica√ß√£o: processos3@adfoods.com.br.
        * **BIOPARK (PARQUE CIENT√çFICO...):** CNPJ 21.526.709/0001-03. Representante: Paulo Victor Almeida. E-mail Notifica√ß√£o: institucional@biopark.com.br.
    
        **ANTES DE RESPONDER, verifique sempre se os dados (CNPJ, CPF, Endere√ßo, E-mail) referem-se √† PARTE correta. A invers√£o de dados √© uma falha inaceit√°vel.**

        **REGRAS DE RIGOR E FIDELIDADE (CUMPRIMENTO OBRIGAT√ìRIO):**
        1.  **Fidelidade Estrita:** Se a informa√ß√£o estiver presente, extraia e forne√ßa a resposta **exata e concisa**, incluindo refer√™ncias (Artigo, ¬ß, Cl√°usula) se mencionadas.
        2.  **Exaust√£o de Listas:** Quando a pergunta for sobre listas, enumera√ß√µes, ou m√∫ltiplas condi√ß√µes, voc√™ deve listar **todos** os itens ou condi√ß√µes encontrados no contexto.
        3.  **Rigor L√≥gico e C√°lculo (Verifica√ß√£o Imperativa):** Se a pergunta se refere a uma penalidade (ex: multa por rescis√£o), voc√™ DEVE primeiro identificar o prazo e a condi√ß√£o estabelecida.
        * **C√ÅLCULO DE PRAZO:** A data de in√≠cio √© **01 de agosto de 2023**. O prazo de 6 meses para multa vai at√© **01 de fevereiro de 2024**.
        * **APLICA√á√ÉO:** A penalidade S√ì SE APLICA se a condi√ß√£o for ATENDIDA EXATAMENTE. Se a data da pergunta for **AP√ìS** a data de corte (01 de fev. 2024), a penalidade **N√ÉO SE APLICA (ZERO)**. Sua resposta deve explicar a raz√£o.
        4.  **An√°lise L√≥gica (Infer√™ncia de Nega√ß√£o):** Se a pergunta questionar sobre uma garantia, permiss√£o ou preval√™ncia que √© explicitamente limitada (ou negada) pelo texto, sua resposta deve inferir a nega√ß√£o/limita√ß√£o a partir do texto.
        5.  **Aten√ß√£o a Exclus√µes (Al√©ms/Excetos):** Se a pergunta solicitar uma lista de itens "al√©m de X" ou "exceto Y", voc√™ **n√£o deve incluir** X ou Y na sua lista final.
        6.  **Resposta Negativa Rigorosa:** Use a resposta: "N√£o encontrei essa informa√ß√£o no(s) documento(s) fornecido(s)." APENAS se a informa√ß√£o for IRRECUPER√ÅVEL (n√£o h√° men√ß√£o ou base para infer√™ncia). **NUNCA use esta resposta se a informa√ß√£o puder ser extra√≠da da se√ß√£o 'IDENTIFICA√á√ÉO DE PARTES' ou da l√≥gica do contrato (Regra 3).**

        Contexto:
        {context}

        Pergunta:
        {question}
        """,
        input_variables=["context", "question"]
        )

    def answer(self, search_key: str, question: str, k: int = 30) -> dict: # estava com top k = 4
        """
        Retorna um dicion√°rio: {'answer': str, 'context': List[str]}
        A busca ser√° feita nos metadados 'cpf_contratado' e 'cnpj_contratado'.
        """
        normalized_key = TextProcessor.normalize_key(search_key)
        self.logger.info(f"üîç Buscando por CPF/CNPJ: {normalized_key}")

        # Recuperador com filtro em ambos os metadados
        retriever = self.vectorstore.as_retriever(
            search_kwargs={
                "filter": {
                    "$or": [
                        {"cnpj_contratado": {"$eq": normalized_key}},
                        {"cpf_contratado": {"$eq": normalized_key}}
                    ]
                },
                "k": k
            }
        )

        qa_chain = RetrievalQA.from_chain_type(
            llm=self.llm,
            chain_type="stuff",  
            retriever=retriever,
            chain_type_kwargs={"prompt": self.prompt_template}
        )

        try:
            docs = retriever.get_relevant_documents(question)
            context_snippets = [d.page_content for d in docs]
            
            
            for i, d in enumerate(docs):
                self.logger.info(f"üìÑ Chunk {i+1}:")
                self.logger.info(f"Conte√∫do: {d.page_content}")
                self.logger.info(f"Metadados: {d.metadata}")
            
            if not context_snippets:
                self.logger.warning("Nenhum contexto encontrado para este CPF/CNPJ.")
                return {"answer": "Nenhuma informa√ß√£o encontrada para este CPF/CNPJ.", "context": []}
            
            combined_context = "\n\n".join(context_snippets)
            self.logger.info("üß© Contexto passado para a LLM:\n" + combined_context)  # mostra s√≥ os primeiros 2000 chars

            self.logger.info(f"‚ùì Pergunta: {question}")

            answer = qa_chain.run(question)
            self.logger.info("Resposta gerada com sucesso.")
            return {"answer": answer, "context": context_snippets}
        except Exception as e:
            self.logger.exception("Erro ao gerar resposta:")
            return {"answer": f"Erro ao gerar resposta: {e}", "context": []}
